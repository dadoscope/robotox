---
title: "Observatório dos novos agrotóxicos"
output: 
  flexdashboard::flex_dashboard:
    orientation: columns
    vertical_layout: fill
runtime: shiny
---

```{r setup, include=FALSE}
library(flexdashboard)
library(shiny)
load("data/robotox.RData")

rexp <- "^(\\w+)\\s?(.*)$"

df_join_agro_cultura$nome_curto_produtor<- sub(rexp,"\\1",df_join_agro_cultura$Produtor)

df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Iharabras"]<- "Iharabrás"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Agro"]<- "Agroimport"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Ouro"]<- "Ouro Fino"

```

Artigo
===================================== 

Este aplicativo é uma extensão do artigo do blog Dadoscope publicado na revista Fórum que trata das novas liberações de agrotóxicos ocorridas entre 30/04/2019 e 10/08/2019. 

A primeira aba mostra o artigo em si, também disponível neste <a href='https://revistaforum.com.br/blogs/dadoscope/cultura-hacker-episodio-o-agrotoxico-nosso-de-cada-dia/' target='_blank'>link</a>

As próximas três abas trazem resultados de consultas utilizando cobinações de três varuáveis: nível de toxicidade, cultura ssociada ao agrotóxico e produtor do agrotóxico.

A última aba traz uma tabela interativa com os dados utilizados.

Ao final do artigo abaixo encontram-se informações sobre como entrar em contato com os desenvolvedores do aplicativo.

```{r}
renderUI({
  
  scr_text<- "https://revistaforum.com.br/blogs/dadoscope/cultura-hacker-episodio-o-agrotoxico-nosso-de-cada-dia/"
  tags$iframe(src = scr_text, height="100%", width="100%")

})



```


Visão - Nível de toxicidade
===================================== 


Inputs {.sidebar data-width=200}
-----------------------------------------------------------------------


```{r}

checkboxGroupInput ("tipo_toxico","Escolha o nível de toxicidade", choices = c("Classe I - Extremamente Tóxico","Classe II - Altamente tóxico","Classe III - Moderadamente Tóxico","Classe IV - Pouco Tóxico"), selected = c("Classe I - Extremamente Tóxico","Classe II - Altamente tóxico","Classe III - Moderadamente Tóxico","Classe IV - Pouco Tóxico") ) 

sliderInput("num_Max", "Informe a quantidade máxima de culturas ou produtores a ser exibido nos gráficos", value=20, min=5, max = 100) 

downloadLink("DownloadToxCult","Download dados Cultura\n")
downloadLink("DownloadToxProd","Download dados Produtor\n")

output$DownloadToxCult<- downloadHandler(
  filename = function() {
     paste('ToxCult-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_tox_cultura$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)


output$DownloadToxProd<- downloadHandler(
  filename = function() {
     paste('ToxProd-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_tox_produtores$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)

```


Column 
-----------------------------------------------------------------------

### Gráfico Culturas



```{r}
library(ggplot2)
library(dplyr)


renderPlot({


  df_filtro<- df_join_agro_cultura%>%
   filter(Classificacao_toxicologica %in% input$tipo_toxico,
   Is_produto_tecnico ==0   )
  
  factor_cultura<-(df_filtro %>%
  group_by(cultura) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$cultura


 df_filtro$cultura <- factor(df_filtro$cultura, levels = factor_cultura)

   

  print(input$tipo_toxico) 
  
  cultura_sel<-  df_filtro%>%
   distinct(cultura) %>%
   arrange(cultura) %>%
   top_n(input$num_Max)
   
   
   graph_tox_cultura<<-df_filtro%>%
   filter(cultura %in% cultura_sel$cultura) %>%
   ggplot(aes(x=cultura, fill= Classificacao_toxicologica)) +
   geom_bar() +
   coord_flip()
   
   graph_tox_cultura



})
```

Column 
-----------------------------------------------------------------------

### Gráfico Produtores


```{r}
rexp <- "^(\\w+)\\s?(.*)$"

df_join_agro_cultura$nome_curto_produtor<- sub(rexp,"\\1",df_join_agro_cultura$Produtor)

df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Iharabras"]<- "Iharabrás"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Agro"]<- "Agroimport"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Ouro"]<- "Ouro Fino"

renderPlot({
  
  
  df_filtro<- df_join_agro_cultura%>%
   filter(Classificacao_toxicologica %in% input$tipo_toxico,
   Is_produto_tecnico ==0   )
  
  factor_nome_curto_produtor<-(df_filtro %>%
  group_by(nome_curto_produtor) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$nome_curto_produtor


 df_filtro$nome_curto_produtor <- factor(df_filtro$nome_curto_produtor, levels = factor_nome_curto_produtor)

   

  print(input$tipo_toxico) 
  
  nome_curto_produtor_sel<-  df_filtro%>%
   distinct(nome_curto_produtor) %>%
   arrange(nome_curto_produtor) %>%
   top_n(input$num_Max)
   
   
   graph_tox_produtores<<- df_filtro%>%
   filter(nome_curto_produtor %in% nome_curto_produtor_sel$nome_curto_produtor) %>%
   ggplot(aes(x=nome_curto_produtor, fill= Classificacao_toxicologica)) +
   geom_bar() +
   coord_flip()
   
   graph_tox_produtores

})

```


Visão - Culturas
===================================== 


Inputs {.sidebar data-width=200}
-----------------------------------------------------------------------


```{r}

selectInput ("cultura_id","Escolha cultura(s)", choices = unique(df_join_agro_cultura[df_join_agro_cultura$Is_produto_tecnico==0,]$cultura), selected = "soja" ,multiple = TRUE) 

#sliderInput("num_Max", "Informe a quantidade máxima de produtores a ser exibido nos gráficos", value=20, min=5, max = 100) 

downloadLink("DownloadCultTox","Download dados Toxicidade\n")
downloadLink("DownloadCultProd","Download dados Produtor\n")

output$DownloadCultTox<- downloadHandler(
  filename = function() {
     paste('CultTox-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_cult_toxico$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)


output$DownloadCultProd<- downloadHandler(
  filename = function() {
     paste('CultProd-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_cult_produtores$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)

```


Column 
-----------------------------------------------------------------------

### Gráfico Toxicidade



```{r}
library(ggplot2)
library(dplyr)


renderPlot({


  df_filtro<- df_join_agro_cultura%>%
   filter(cultura %in% input$cultura_id)
  
  factor_cultura<-(df_filtro %>%
  group_by(cultura) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$cultura

  df_filtro$cultura <- factor(df_filtro$cultura, levels = factor_cultura)


   graph_cult_toxico<<-df_filtro%>%
   filter(cultura %in% input$cultura_id) %>%
   ggplot(aes(x=Classificacao_toxicologica, fill=cultura)) +
   geom_bar() +
   facet_grid(cultura ~ .,scales="free_y", space = "free_y")  +
   coord_flip()
   
   graph_cult_toxico



})
```

Column 
-----------------------------------------------------------------------

### Gráfico Produtores


```{r}
rexp <- "^(\\w+)\\s?(.*)$"

df_join_agro_cultura$nome_curto_produtor<- sub(rexp,"\\1",df_join_agro_cultura$Produtor)

df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Iharabras"]<- "Iharabrás"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Agro"]<- "Agroimport"
df_join_agro_cultura$nome_curto_produtor[df_join_agro_cultura$nome_curto_produtor== "Ouro"]<- "Ouro Fino"

renderPlot({
  
  
  df_filtro<- df_join_agro_cultura%>%
   filter(cultura %in% input$cultura_id)
   
  
  factor_nome_curto_produtor<-(df_filtro %>%
  group_by(nome_curto_produtor) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$nome_curto_produtor


 df_filtro$nome_curto_produtor <- factor(df_filtro$nome_curto_produtor, levels = factor_nome_curto_produtor)

  factor_cultura<-(df_filtro %>%
  group_by(cultura) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$cultura

  df_filtro$cultura <- factor(df_filtro$cultura, levels = factor_cultura)
   

  print(input$tipo_toxico) 
  

   graph_cult_produtores<<- df_filtro%>%
   filter(cultura %in% input$cultura_id) %>%
   ggplot(aes(x=nome_curto_produtor, fill=cultura)) +
   geom_bar() +
   facet_grid(cultura ~ .,scales="free_y", space = "free_y")  +
   coord_flip()
   
   graph_cult_produtores

})

```


Visão - Produtores
===================================== 


Inputs {.sidebar data-width=200}
-----------------------------------------------------------------------


```{r}

selectInput ("produtor_id","Escolha produtor(es)", choices = unique(df_join_agro_cultura[df_join_agro_cultura$Is_produto_tecnico==0,]$nome_curto_produtor), 
             selected = unique(df_join_agro_cultura[df_join_agro_cultura$Is_produto_tecnico==0,]$nome_curto_produtor)[1] ,multiple = TRUE) 

#sliderInput("num_Max", "Informe a quantidade máxima de produtores a ser exibido nos gráficos", value=20, min=5, max = 100) 

downloadLink("DownloadProdTox","Download dados Toxicidade\n")
downloadLink("DownloadProdCult","Download dados Produtor\n")

output$DownloadProdTox<- downloadHandler(
  filename = function() {
     paste('ProdTox-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_prod_toxicidade$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)


output$DownloadProdCult<- downloadHandler(
  filename = function() {
     paste('ProdCult-', Sys.Date(), '.csv', sep='')
   },
  content = function(file) {
     #write.csv2(dados_tabela, file, row.names = FALSE)
     write.table(graph_prod_cultura$data, file, sep = ";",row.names = FALSE,fileEncoding = "LATIN1",dec=",")
   }
)


```


Column 
-----------------------------------------------------------------------

### Gráfico Toxicidade


```{r}
library(ggplot2)
library(dplyr)


renderPlot({


  df_filtro<- df_join_agro_cultura%>%
   filter(nome_curto_produtor %in% input$produtor_id)
  
  factor_nome_curto_produtor<-(df_filtro %>%
  group_by(nome_curto_produtor) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$nome_curto_produtor


  df_filtro$nome_curto_produtor <- factor(df_filtro$nome_curto_produtor, levels = factor_nome_curto_produtor)

   graph_prod_toxicidade<<-df_filtro%>%
   ggplot(aes(x=Classificacao_toxicologica, fill=nome_curto_produtor)) +
   geom_bar() +
   facet_grid(nome_curto_produtor ~ .,scales="free_y", space = "free_y")  +
   coord_flip()
   
   graph_prod_toxicidade



})
```

Column 
-----------------------------------------------------------------------

### Gráfico Cultura


```{r}

renderPlot({
  
  

  df_filtro<- df_join_agro_cultura%>%
   filter(nome_curto_produtor %in% input$produtor_id,
          Is_produto_tecnico==0)
   
  
  factor_nome_curto_produtor<-(df_filtro %>%
  group_by(nome_curto_produtor) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$nome_curto_produtor


 df_filtro$nome_curto_produtor <- factor(df_filtro$nome_curto_produtor, levels = factor_nome_curto_produtor)

  factor_cultura<-(df_filtro %>%
  group_by(cultura) %>%
  summarise(contagem = n()) %>%
  arrange(contagem))$cultura

  df_filtro$cultura <- factor(df_filtro$cultura, levels = factor_cultura)
   

   graph_prod_cultura<<-df_filtro%>%
   ggplot(aes(x=cultura, fill= nome_curto_produtor)) +
   geom_bar() +
   facet_grid(nome_curto_produtor ~ .,scales="free_y", space = "free_y")  +
   coord_flip()
   
   graph_prod_cultura

})

```



Tabela de dados
===================================== 

### Tabela

```{r}
library(DT)


renderDataTable ({
  df_join_agro_cultura%>%
    distinct(Produtor,Marca,Classificacao_toxicologica,Aplicacao,created_at)%>%
    DT::datatable(                  fillContainer = TRUE,
                   selection = "none",
                   extensions = "Buttons", 
                   rownames = FALSE, 
                   colnames=c("Produtor","Marca","Classificação toxicológica","Aplicação","Data de Publicação"),
                   options = list(
                    pageLength = NROW(agrotoxico),
                    dom = 'Bfrtip',
                    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
                   ))
})



```


