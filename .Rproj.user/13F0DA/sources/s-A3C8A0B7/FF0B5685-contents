---
title: "Redes de palavras #VazaJato"
output: 
  flexdashboard::flex_dashboard:
    social: menu
    source_code: embed
runtime: shiny    
---

```{r setup, include=FALSE}
library(flexdashboard)
library(dplyr)
library(tidytext)
library(tidyr)
library(widyr)
library(shiny)
library(igraph)
library(ggraph)
#dataframe com texto e classe
load("data/word_cors.RData")
load("data/df_texto_url.RData")
```

Sidebar {.sidebar}
=====================================

Abaixo você controla o tipo de gráfico, o tamanho das letras, a contagem mínima de ocorrência de palavra, o termo para fazer o filtro e o nivel de correlação entre as palavras. Quanto menor o nível de correlação mais palavras serão exibidas

```{r}
termos<<- unique(analise_twitter_secoes$classe)
radioButtons("tipo_layout",
             "Tipo de layout",
             choices = c("graphopt"= "graphopt",                                                                      "mds"= "mds",
                        "kk" ="kk",
                         "fr"="fr"),
             selected = "graphopt")
numericInput("tam_fonte", "Tamanho da fonte", value=3,
min=1, max=5, step=1, width = 80)
sliderInput("correlacao", "Correlação Mínima", min=0.5, max = 1, value = 0.65, step = 0.05)
selectInput("termo","Termo",choices = termos,multiple = TRUE, selected = termos[1])
sliderInput("cont_palavras","Contagem mínimoa de palavras",value=50,
min=20, max=100, step=5)
selectInput("palavrasSel","Palavras",choices = NULL,multiple = TRUE)
```


Rede de Palavras 
=====================================




Column 
-----------------------------------------------------------------------


### Gráfico da rede
Com o botão pressionado, arraste o mouse sobre as palavras que formam uma sub-rede. Libere o mouse e você verá do lado direito uma tabela com todas as referências de tuítes ligadas ä sub-rede selecionada. Se você não fizer a seleção a tabela irá mostrar as dez primeiras referências de tuítes sobre a Vaza Jato.


```{r}
library(dplyr)
library(tidytext)
library(tidyr)
library(scales)
library(ggplot2)
library(igraph)
library(ggraph)
library(widyr)
library(stringr)
output$word_graph<-renderPlot({
  
  termo_sel <- ifelse(is.null(input$termo),termos[1],input$termo)
  
  words_trabalho <- analise_twitter_secoes %>%
    filter(classe %in% termo_sel)
  
  words_trabalho<- words_trabalho %>%
  group_by(word) %>%
  filter(n() >= input$cont_palavras) %>%
  pairwise_cor(word, section, sort = TRUE)
  
  set.seed(2016)
  
  #graphopt, mds, kk, drl e fr como opções
  grafico_pal<<-words_trabalho %>%
    filter(correlation > input$correlacao) %>%
    graph_from_data_frame() %>%
    ggraph(layout = input$tipo_layout) +
    geom_edge_link(aes(edge_alpha = correlation), show.legend = FALSE) +
    geom_node_point(color = "lightblue", size = input$tam_fonte) +
    geom_node_text(aes(label = name), repel = TRUE,size=input$tam_fonte, color="red") +
    theme_void()
  
  grafico_pal
})
plotOutput('word_graph',brush = brushOpts(id="plot_brush", resetOnNew = TRUE))
selecao<- observeEvent(input$plot_brush,{
  
  val<- input$plot_brush
  
  if (!is.null(val)){
    vetor_x_palavras <- which(grafico_pal$data$x>= val$xmin & grafico_pal$data$x<= val$xmax) 
    vetor_y_palavras <- which(grafico_pal$data$y>= val$ymin & grafico_pal$data$y<= val$ymax)
    
    
    
    vetor_palavras <- vetor_x_palavras[which(vetor_x_palavras %in% vetor_y_palavras)] 
    
    
    palavras <- grafico_pal$data$name[vetor_palavras]
    
    print(paste0("Palavras",palavras))
    updateSelectInput(session,"palavrasSel",choices= palavras, selected = palavras)
    
    # texto<- df_texto_url$text
    # 
    # palavra_sel<- palavras
    # 
    # regex_pal<<-"^"
    # 
    # map_chr(palavra_sel, function(palavra){
    #   regex_pal<<- paste0(regex_pal,"(?=.*\\b",palavra,"\\b)")
    #  }
    # )
    # 
    # regex_pal <- paste0(regex_pal,".*$" )
    # pos<- str_which(texto, regex_pal)
    # 
    # df_table <<- df_texto_url[pos,]
    
  } 
  
})
```

Column {data-width=300}
-----------------------------------------------------------------------


### Tabela com os tuítes referenciados

```{r}
library(DT)
library(purrr)
renderDataTable({
  
  if (is.null(input$palavrasSel)){
    df_table<- df_texto_url%>%
      top_n(10) 
  } else{
    
    texto<- df_texto_url$text
    
    texto<- str_replace_all(texto, "[\r\n]" , " ")
    
    palavra_sel<- input$palavrasSel
    
    regex_pal<<-"^"
    
    map_chr(palavra_sel, function(palavra){
      regex_pal<<- paste0(regex_pal,"(?=.*\\b",palavra,"\\b)")
     }
    )
    
    regex_pal <- paste0(regex_pal,".*$" )
    print(regex_pal)
    pos<- str_which(texto, regex_pal)
    
    df_table <- df_texto_url[pos,]
  }  
  
  df_table %>%
    select(text) %>%
     DT::datatable(colnames = c("Texto"),
                   fillContainer = TRUE,
                   selection = "none",
                   extensions = "Buttons", 
                   rownames = FALSE, 
                   options = list(
                    pageLength = NROW(df_table),
                    dom = 'Bfrtip',
                    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
                   ))
    
})
```

Analítico 
=====================================

### Detalhamento dos tuítes

```{r}
renderDataTable({
  
  print("analítico")
  print(input$palavrasSel)
  
  if (is.null(input$palavrasSel)){
    print(names(df_texto_url))
    df_analitico<- df_texto_url%>%
      select(user_id,text,description, status_url)%>% 
      top_n(10) 
    
    print(NROW(df_analitico))
    
  } else{
    
    print(names(df_texto_url))
    
    texto<- df_texto_url$text
    
    texto<- str_replace_all(texto, "[\r\n]" , " ")
    
    palavra_sel<- input$palavrasSel
    
    regex_pal_analitico<<-"^"
    
    map_chr(palavra_sel, function(palavra){
      regex_pal_analitico<<- paste0(regex_pal_analitico,"(?=.*\\b",palavra,"\\b)")
     }
    )
    
    regex_pal_analitico <- paste0(regex_pal_analitico,".*$" )
    print(regex_pal_analitico)
    pos<- str_which(texto, regex_pal_analitico)
    
    df_analitico<- df_texto_url[pos,]
    
    print(NROW(df_analitico))
  }  
  
  # titulo = 
  #                                  paste0("<a href='https://www.google.com/search?q=issn%20",
  #                                         issn, "%20-%20", titulo, "', target='_blank' />", titulo, "</a>")
  
  df_analitico %>% 
    mutate(status_url = paste0("<a href='",status_url,"', target='_blank' />", status_url, "</a>"))
  
  
  print(head(df_analitico$status_url))
  
  # createLink <- function(val) {
  #     sprintf(paste0("<a href='", URLdecode(val),"' target='_blank'>", val ,"</a>"))}
  #   
  #   
  # df_analitico$status_url <- HTML(createLink(df_analitico$status_url))
  df_analitico %>%
    select(user_id,text,description, status_url)%>% 
     DT::datatable(colnames = c("Texto","Descricao","URL"),
                   fillContainer = TRUE,
                   selection = "none",
                   extensions = "Buttons", 
                   rownames = FALSE, 
                   options = list(
                    pageLength = NROW(df_analitico),
                    dom = 'Bfrtip',
                    buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
                   ))
    
})
# renderDataTable({
#   df_table%>%
#     select(text,description, status_url)%>% 
#     DT::datatable(colnames = c("Conta", "Título da conta", "Função"), fillContainer = TRUE,extensions = "Buttons", rownames = FALSE, options = list(
#     pageLength = NROW(df_table), 
#     dom = 'Bfrtip',
#     buttons = c('copy', 'csv', 'excel', 'pdf', 'print')
#   ) )
  
#})
```
